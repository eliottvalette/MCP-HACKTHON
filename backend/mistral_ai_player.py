"""
Joueur IA Mistral pour Clash Royale
Utilise les outils MCP pour prendre des d√©cisions strat√©giques
"""

import asyncio
import random
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class MistralAIPlayer:
    def __init__(self, session_id: str, websocket_manager):
        self.session_id = session_id
        self.websocket_manager = websocket_manager
        self.team = "red"  # Mistral joue toujours en √©quipe rouge
        self.difficulty = "medium"  # easy, medium, hard
        self.thinking_delay = 2.0  # D√©lai de r√©flexion en secondes
        
        # Strat√©gie de base
        self.preferred_troops = ["giant", "babyDragon", "miniPekka", "valkyrie"]
        self.last_action_time = datetime.now()

    async def process_game_action(self, human_action):
        """Traite l'action du joueur humain et g√©n√®re une r√©ponse"""
        try:
            logger.info(f"ü§ñ Mistral AI processing human action: {human_action.type}")
            
            # D√©lai de r√©flexion pour rendre l'IA plus naturelle
            await asyncio.sleep(self.thinking_delay)
            
            # Analyser l'action de l'humain
            response_action = await self._generate_strategic_response(human_action)
            
            if response_action:
                # Envoyer l'action de Mistral au joueur humain
                await self.websocket_manager.send_mistral_action_to_human(
                    self.session_id, 
                    response_action
                )
                
                self.last_action_time = datetime.now()
                logger.info(f"ü§ñ Mistral AI responded with: {response_action.type}")
            
        except Exception as e:
            logger.error(f"Error in Mistral AI processing: {e}")

    async def _generate_strategic_response(self, human_action) -> Optional:
        """G√©n√®re une r√©ponse strat√©gique √† l'action humaine"""
        from .websocket_manager import GameAction
        
        if human_action.type == "SPAWN_TROOP":
            return await self._counter_troop_deployment(human_action)
        elif human_action.type == "GAME_STATE_UPDATE":
            return await self._analyze_game_state_and_act(human_action)
        
        return None

    async def _counter_troop_deployment(self, human_action) -> Optional:
        """G√©n√®re une contre-attaque bas√©e sur la troupe d√©ploy√©e par l'humain"""
        from .websocket_manager import GameAction
        
        human_troop = human_action.payload.get("troopType")
        human_row = human_action.payload.get("row", 16)
        human_col = human_action.payload.get("col", 9)
        
        logger.info(f"ü§ñ Analyzing human deployment: {human_troop} at ({human_row}, {human_col})")
        
        # Strat√©gie de contre bas√©e sur le type de troupe
        counter_strategy = self._get_counter_strategy(human_troop)
        
        # Choisir une position strat√©gique pour Mistral (c√¥t√© rouge)
        mistral_row, mistral_col = self._choose_deployment_position(human_row, human_col)
        
        # Cr√©er l'action de d√©ploiement pour Mistral
        response_action = GameAction(
            action_type="MISTRAL_MOVE",
            payload={
                "troopType": counter_strategy["troop"],
                "row": mistral_row,
                "col": mistral_col,
                "team": "red",
                "reasoning": counter_strategy["reasoning"]
            },
            player_id="mistral_ai"
        )
        
        logger.info(f"ü§ñ Mistral counter: {counter_strategy['troop']} at ({mistral_row}, {mistral_col}) - {counter_strategy['reasoning']}")
        
        return response_action

    def _get_counter_strategy(self, human_troop: str) -> Dict[str, str]:
        """D√©termine la meilleure contre-strat√©gie"""
        strategies = {
            "giant": {
                "troop": "miniPekka",
                "reasoning": "Mini PEKKA excelle contre les tanks comme le Giant"
            },
            "babyDragon": {
                "troop": "valkyrie", 
                "reasoning": "Valkyrie peut tanker les d√©g√¢ts du Baby Dragon"
            },
            "miniPekka": {
                "troop": "valkyrie",
                "reasoning": "Valkyrie peut r√©sister au Mini PEKKA"
            },
            "valkyrie": {
                "troop": "babyDragon",
                "reasoning": "Baby Dragon peut attaquer √† distance contre Valkyrie"
            }
        }
        
        # Strat√©gie par d√©faut + un peu d'al√©atoire
        default_strategy = {
            "troop": random.choice(self.preferred_troops),
            "reasoning": "D√©ploiement strat√©gique standard"
        }
        
        return strategies.get(human_troop, default_strategy)

    def _choose_deployment_position(self, human_row: int, human_col: int) -> tuple[int, int]:
        """Choisit une position de d√©ploiement strat√©gique pour Mistral"""
        
        # Mistral joue du c√¥t√© rouge (lignes 0-15)
        # Positions strat√©giques possibles
        strategic_positions = [
            (14, 3),   # C√¥t√© gauche
            (14, 9),   # Centre
            (14, 15),  # C√¥t√© droit
            (12, 6),   # Centre-gauche
            (12, 12),  # Centre-droit
        ]
        
        # Si l'humain attaque un c√¥t√©, d√©fendre l'autre c√¥t√©
        if human_col < 6:  # Humain attaque √† gauche
            preferred_positions = [(14, 15), (12, 12), (14, 9)]
        elif human_col > 12:  # Humain attaque √† droite  
            preferred_positions = [(14, 3), (12, 6), (14, 9)]
        else:  # Humain attaque au centre
            preferred_positions = [(14, 3), (14, 15), (12, 6), (12, 12)]
        
        # Choisir une position avec un peu d'al√©atoire
        available_positions = preferred_positions if preferred_positions else strategic_positions
        return random.choice(available_positions)

    async def _analyze_game_state_and_act(self, game_state_action) -> Optional:
        """Analyse l'√©tat du jeu et prend une d√©cision proactive"""
        # Pour l'instant, on ne fait rien sur les updates d'√©tat
        # Mais on pourrait analyser la situation et prendre des initiatives
        return None

    def set_difficulty(self, difficulty: str):
        """Ajuste la difficult√© de l'IA"""
        self.difficulty = difficulty
        
        if difficulty == "easy":
            self.thinking_delay = 3.0
            # IA plus pr√©visible
        elif difficulty == "medium":
            self.thinking_delay = 2.0
        elif difficulty == "hard":
            self.thinking_delay = 1.0
            # IA plus agressive et rapide
        
        logger.info(f"ü§ñ Mistral AI difficulty set to: {difficulty}")
