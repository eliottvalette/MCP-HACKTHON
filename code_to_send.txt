
# ====== ui/src/app/api/game/init/route.ts ======
import { NextResponse } from 'next/server';

const MCP_SERVER_URL = process.env.NEXT_PUBLIC_MCP_SERVER_URL || 'http://localhost:8000';

export async function POST() {
  try {
    const response = await fetch(`${MCP_SERVER_URL}/api/game/init`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`MCP server responded with ${response.status}`);
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error initializing game:', error);
    return NextResponse.json(
      { error: 'Failed to initialize game' },
      { status: 500 }
    );
  }
}

# ====== ui/src/app/api/game/spawn/route.ts ======
import { NextRequest, NextResponse } from 'next/server';

const MCP_SERVER_URL = process.env.NEXT_PUBLIC_MCP_SERVER_URL || 'http://localhost:8000';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // Log what we're sending to the Python server
    console.log('=== SPAWN REQUEST TO PYTHON SERVER ===');
    console.log('URL:', `${MCP_SERVER_URL}/api/game/spawn`);
    console.log('Body:', JSON.stringify(body, null, 2));

    const response = await fetch(`${MCP_SERVER_URL}/api/game/spawn`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });

    const responseText = await response.text();
    console.log('Python server response status:', response.status);
    console.log('Python server response:', responseText);

    // Try to parse as JSON
    let data;
    try {
      data = JSON.parse(responseText);
    } catch (e) {
      console.error('Failed to parse response as JSON:', responseText);
      return NextResponse.json(
        { error: 'Invalid response from server', details: responseText },
        { status: 500 }
      );
    }

    if (!response.ok) {
      console.error('Python server returned error:', data);
      // Return the actual error from Python server
      return NextResponse.json(data, { status: response.status });
    }

    console.log('Spawn successful:', data);
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error in spawn route:', error);
    return NextResponse.json(
      {
        error: 'Failed to spawn troop',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

# ====== ui/src/app/api/game/state/route.ts ======
import { NextRequest, NextResponse } from 'next/server';

const MCP_SERVER_URL = process.env.NEXT_PUBLIC_MCP_SERVER_URL || 'http://localhost:8000';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const gameId = searchParams.get('game_id');

  if (!gameId) {
    return NextResponse.json(
      { error: 'game_id is required' },
      { status: 400 }
    );
  }

  try {
    const response = await fetch(`${MCP_SERVER_URL}/api/game/${gameId}/state`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`MCP server responded with ${response.status}`);
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    console.error('Error getting game state:', error);
    return NextResponse.json(
      { error: 'Failed to get game state' },
      { status: 500 }
    );
  }
}

# ====== ui/src/app/api/game/sync/route.ts ======
import { NextRequest, NextResponse } from 'next/server';

const MCP_SERVER_URL = process.env.MCP_SERVER_URL || 'http://localhost:8000';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    console.log('=== SYNC REQUEST TO PYTHON SERVER ===');
    console.log('Game ID:', body.game_id);
    console.log('Troops count:', body.troops?.length || 0);
    console.log('Game over:', body.is_game_over);

    // Send state to Python server and get AI actions
    const response = await fetch(`${MCP_SERVER_URL}/sync`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        game_id: body.game_id,
        troops: body.troops || [],
        towers: body.towers || {},
        is_game_over: body.is_game_over || false,
        winner: body.winner || null,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Python server error:', errorText);
      return NextResponse.json(
        { error: 'Failed to sync with Python server' },
        { status: response.status }
      );
    }

    const data = await response.json();

    console.log('=== SYNC RESPONSE FROM PYTHON SERVER ===');
    console.log('AI actions:', data.ai_actions?.length || 0);
    console.log('Tactical analysis:', data.tactical_analysis);

    return NextResponse.json(data);
  } catch (error) {
    console.error('Error in /api/game/sync:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

# ====== ui/src/app/api/mcp/[transport]/route.ts ======
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextRequest, NextResponse } from "next/server";

type JsonRpcReq = { jsonrpc?: "2.0"; id?: number | string | null; method: string; params?: any };

const tools = [
  { name: "start_game", description: "Démarre une nouvelle partie de Clash Royale", inputSchema: { type: "object", properties: {}, required: [] } },
  {
    name: "deploy_troop",
    description: "Déploie une troupe sur le terrain de bataille",
    inputSchema: {
      type: "object",
      properties: {
        game_id: { type: "string" },
        troop_type: { type: "string", enum: ["GIANT", "BABY_DRAGON", "MINI_PEKKA", "VALKYRIE"] },
        position: { type: "object", properties: { row: { type: "number" }, col: { type: "number" } }, required: ["row", "col"] },
        team: { type: "string", enum: ["red", "blue"] },
      },
      required: ["game_id", "troop_type", "position", "team"],
    },
  },
  { name: "get_game_state", description: "Récupère l'état actuel du jeu (troupes, tours, statistiques)", inputSchema: { type: "object", properties: { game_id: { type: "string" } }, required: ["game_id"] } },
  {
    name: "analyze_strategy",
    description: "Analyse une stratégie Clash Royale",
    inputSchema: { type: "object", properties: { situation: { type: "string" } }, required: ["situation"] },
  },
];

async function proxyApi(path: string, options: RequestInit) {
  const base = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
  const res = await fetch(`${base}${path}`, options);
  const text = await res.text();
  try { return JSON.parse(text); } catch { return { error: "Invalid JSON", raw: text }; }
}

async function executeTool(name: string, args: any) {
  switch (name) {
    case "start_game": {
      const data = await proxyApi("/api/game/init", { method: "POST" });
      return { content: [{ type: "text", text: JSON.stringify(data, null, 2) }] };
    }
    case "deploy_troop": {
      const data = await proxyApi("/api/game/spawn", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(args) });
      return { content: [{ type: "text", text: JSON.stringify(data, null, 2) }] };
    }
    case "get_game_state": {
      const gameId = args?.game_id;
      const data = await proxyApi(`/api/game/state?game_id=${gameId}`, { method: "GET" });
      return { content: [{ type: "text", text: JSON.stringify(data, null, 2) }] };
    }
    case "analyze_strategy": {
      return { content: [{ type: "text", text: JSON.stringify({ situation: args.situation, recommendation: "Analyse côté serveur à brancher" }, null, 2) }] };
    }
    default: throw new Error(`Unknown tool: ${name}`);
  }
}

function jsonRpcResult(id: any, result: any) { return NextResponse.json({ jsonrpc: "2.0", id: id ?? null, result }); }
function jsonRpcError(id: any, code: number, message: string) { return NextResponse.json({ jsonrpc: "2.0", id: id ?? null, error: { code, message } }); }

export async function POST(req: NextRequest) {
  try {
    const body = (await req.json()) as JsonRpcReq;
    const { id, method, params } = body;
    if (method === "server/info") return jsonRpcResult(id, { name: "clash-royale-mcp", version: "1.0.0", capabilities: { tools: {} } });
    if (method === "tools/list") return jsonRpcResult(id, { tools });
    if (method === "tools/call") {
      const { name, arguments: args } = params ?? {};
      if (!name) return jsonRpcError(id, -32602, "Missing tool name");
      try { return jsonRpcResult(id, await executeTool(name, args ?? {})); }
      catch (e: any) { return jsonRpcError(id, -32000, e?.message ?? "Tool error"); }
    }
    return jsonRpcError(id, -32601, "Method not found");
  } catch { return jsonRpcError(null, -32700, "Parse error"); }
}

export function GET() { return NextResponse.json({ ok: true, endpoint: "MCP streamable" }); }

# ====== ui/src/game/ServerSyncEngine.ts ======
import { GameEngine } from './GameEngine';
import { TroopType } from './types/Troop';

export interface ServerGameState {
  game_id: string;
  troops: Array<{
    id: string;
    type: string;
    team: string;
    position: { row: number; col: number };
    health: number;
    max_health: number;
  }>;
  towers: Record<string, {
    id: string;
    team: string;
    type: string;
    health: number;
    max_health: number;
    position: { row: number; col: number };
  }>;
  elixir: { red: number; blue: number };
  available_cards: string[];
  game_time: number;
  tactical_analysis: string;
  is_game_over: boolean;
  winner: string | null;
}

export class ServerSyncEngine extends GameEngine {
  private gameId: string | null = null;
  private syncInterval: NodeJS.Timeout | null = null;
  private isAIMode: boolean = false;
  private serverUrl: string;

  constructor(serverUrl?: string) {
    super();
    this.serverUrl = serverUrl || process.env.NEXT_PUBLIC_MCP_SERVER_URL || 'http://localhost:8000';
  }

  public setOnUpdate(callback: (troops: any[]) => void): void {
    this.onUpdateCallback = callback;
  }

  public setOnGameEnd(callback: (winner: 'red' | 'blue') => void): void {
    this.onGameEndCallback = callback;
  }

  // Override start method to use our own gameLoop without time increment
  public start(): void {
    if (this.gameState.isRunning) {
      return;
    }

    this.gameState.isRunning = true;
    this.gameState.lastUpdateTime = performance.now();
    
    // Use our custom gameLoop that doesn't increment time locally
    this.serverGameLoop();
  }

  // Custom gameLoop that doesn't increment time locally
  private serverGameLoop = () => {
    if (!this.gameState.isRunning) {
      return;
    }

    const currentTime = performance.now();
    const deltaTime = (currentTime - this.gameState.lastUpdateTime) / 1000; // Convert to seconds
    
    this.update(deltaTime);
    
    this.gameState.lastUpdateTime = currentTime;
    // 🚀 Pas d'incrémentation locale du temps - on se fie au serveur
    
    // Utiliser setTimeout pour l'environnement serveur, requestAnimationFrame pour le client
    if (typeof window !== 'undefined') {
      (this as any).animationFrameId = requestAnimationFrame(this.serverGameLoop);
    } else {
      // Environnement serveur - utiliser setTimeout
      setTimeout(() => {
        this.serverGameLoop();
      }, 16); // ~60 FPS
    }
  };

  // Override problematic methods from GameEngine
  protected cleanupDeadTroops(): void {
    // Don't delete troops locally, let server manage lifecycle
    // But we still need to mark them as dead locally
    const deadTroops = Array.from(this.troops.entries())
      .filter(([, troop]) => {
        if (!troop || !troop.data) {
          console.warn('Troop missing data property:', troop);
          return false;
        }
        return !troop.data.isAlive;
      })
      .map(([id, ]) => id);

    for (const id of deadTroops) {
      // Instead of deleting, just mark as dead
      const troop = this.troops.get(id);
      if (troop && troop.data) {
        troop.data.isAlive = false;
      }
    }
  }

  // Remove the update() override - let parent class handle game logic
  // This allows troops to move locally using the existing GameEngine logic

  public async initializeServerGame(aiMode: boolean = false): Promise<string> {
    this.isAIMode = aiMode;

    try {
      const response = await fetch('/api/game/init', {
        method: 'POST',
      });

      if (!response.ok) {
        throw new Error('Failed to initialize game');
      }

      const data = await response.json();
      this.gameId = data.game_id;

      // Start syncing with server
      this.startServerSync();

      return this.gameId!;
    } catch (error) {
      console.error('Error initializing server game:', error);
      throw error;
    }
  }

  private startServerSync(): void {
    if (!this.gameId) return;

    console.log('🔄 Starting server sync polling for game:', this.gameId);

    // Poll every 500ms for updates
    this.syncInterval = setInterval(() => {
      console.log('⏰ Polling server for updates...');
      this.syncWithServer();
    }, 500);
  }

  private async syncWithServer(): Promise<void> {
    if (!this.gameId) return;

    try {
      const response = await fetch(`/api/game/state?game_id=${this.gameId}`);

      if (!response.ok) {
        throw new Error('Failed to fetch game state');
      }

      const state: ServerGameState = await response.json();
      console.log('📦 Received server state:', {
        troopCount: state.troops?.length || 0,
        towerCount: Object.keys(state.towers || {}).length,
        gameTime: state.game_time,
        troops: state.troops
      });
      this.updateLocalState(state);
    } catch (error) {
      console.error('Error syncing with server:', error);
    }
  }

  private updateLocalState(serverState: ServerGameState): void {
    console.log('🔄 updateLocalState called with:', {
      hasTroops: !!serverState.troops,
      troopCount: serverState.troops?.length || 0
    });

    // Track existing troop IDs
    const existingTroopIds = new Set(this.troops.keys());
    const serverTroopIds = new Set(serverState.troops?.map(t => t.id) || []);

    // Convert server troop type format (UPPER_SNAKE_CASE) to UI format (camelCase)
    const convertTroopType = (serverType: string): string => {
      const typeMap: Record<string, string> = {
        'GIANT': 'giant',
        'BABY_DRAGON': 'babyDragon',
        'MINI_PEKKA': 'miniPekka',
        'VALKYRIE': 'valkyrie'
      };
      return typeMap[serverType] || serverType.toLowerCase();
    };

    // Update troops from server (check if troops exists)
    if (serverState.troops && Array.isArray(serverState.troops)) {
      console.log('📊 Processing troops from server:', serverState.troops.length);

      serverState.troops.forEach(serverTroop => {
        // Check if this troop already exists locally
        if (this.troops.has(serverTroop.id)) {
          // Troop exists - just update health from server
          const existingTroop = this.troops.get(serverTroop.id);
          if (existingTroop && existingTroop.data) {
            existingTroop.data.health = serverTroop.health;
            existingTroop.data.isAlive = serverTroop.health > 0;
            console.log(`📝 Updated existing troop ${serverTroop.id} health: ${serverTroop.health}`);
          }
        } else {
          // New troop from server - spawn it locally
          console.log(`🆕 New troop from server: ${serverTroop.id}`);

          // Convert server troop type to UI format
          const uiTroopType = convertTroopType(serverTroop.type);

          // Spawn the troop using the parent GameEngine's spawnTroop method
          // This will create a proper troop entity with all the movement logic
          const troopId = super.spawnTroop(
            uiTroopType as TroopType,
            serverTroop.team as 'red' | 'blue',
            serverTroop.position.row,
            serverTroop.position.col
          );

          // Replace the auto-generated ID with the server ID
          const spawnedTroop = this.troops.get(troopId);
          if (spawnedTroop) {
            this.troops.delete(troopId);
            this.troops.set(serverTroop.id, spawnedTroop);
            if (spawnedTroop.data) {
              spawnedTroop.data.id = serverTroop.id;
              spawnedTroop.data.health = serverTroop.health;
              spawnedTroop.data.maxHealth = serverTroop.max_health || 100;
            }
          }

          console.log('🎮 Spawned new troop locally:', {
            id: serverTroop.id,
            type: uiTroopType,
            team: serverTroop.team,
            position: serverTroop.position
          });
        }
      });

      // Remove troops that are no longer on the server
      for (const localId of existingTroopIds) {
        if (!serverTroopIds.has(localId)) {
          console.log(`🗑️ Removing troop ${localId} (no longer on server)`);
          this.troops.delete(localId);
        }
      }

      console.log(`✅ Total troops in map: ${this.troops.size}`);
    } else {
      console.log('⚠️ No troops in server state or troops not an array');
    }

    // Update towers
    if (serverState.towers && typeof serverState.towers === 'object') {
      Object.entries(serverState.towers).forEach(([towerId, towerData]: any) => {
        const existingTower = this.getTowerEntity(towerId);
        if (!existingTower) {
          // créer la tour localement si absente
          this.addTower(
            towerData.id,
            (towerData.type as 'king' | 'princess'),
            (towerData.team as 'red' | 'blue'),
            towerData.position.row,
            towerData.position.col
          );
        }
        const towerEnt = this.getTowerEntity(towerId);
        if (towerEnt && towerEnt.data) {
          (towerEnt.data as any).health = towerData.health;
          (towerEnt.data as any).maxHealth = towerData.max_health;
          (towerEnt.data as any).isAlive = towerData.health > 0;
          (towerEnt.data as any).active = towerData.health > 0;
        }
      });
    }

    // Update game state
    if (serverState.is_game_over && serverState.winner) {
      this.handleGameEnd(serverState.winner as 'red' | 'blue');
    }

    // 🚀 On se fie au serveur pour le temps et les stats
    this.gameState = {
      ...this.gameState,
      gameTime: serverState.game_time ?? 0,
    };

    // No need to manually trigger UI update here anymore
    // The parent GameEngine's update() method will handle it
  }

  public async spawnTroopOnServer(
    type: TroopType,
    team: 'red' | 'blue',
    row: number,
    col: number
  ): Promise<boolean> {
    if (!this.gameId) {
      console.error('No game ID available');
      return false;
    }

    // Convert TroopType enum value to the format expected by Python server
    const troopTypeMap: Record<string, string> = {
      'giant': 'GIANT',
      'babyDragon': 'BABY_DRAGON',
      'miniPekka': 'MINI_PEKKA',
      'valkyrie': 'VALKYRIE'
    };

    const serverTroopType = troopTypeMap[type] || type.toUpperCase();

    const requestData = {
      game_id: this.gameId,
      troop_type: serverTroopType,
      position: { row, col },
      team,
    };

    console.log('=== SENDING SPAWN REQUEST ===');
    console.log('Data:', JSON.stringify(requestData, null, 2));

    try {
      const response = await fetch('/api/game/spawn', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to spawn troop - Response:', errorText);
        try {
          const error = JSON.parse(errorText);
          console.error('Error details:', error);
        } catch {
          console.error('Could not parse error response');
        }
        return false;
      }

      const result = await response.json();

      if (result.success) {
        // Server will update state, we'll receive it via sync
        console.log('Troop spawned successfully:', result.message);
        return true;
      } else {
        console.error('Failed to spawn troop:', result.error);
        return false;
      }
    } catch (error) {
      console.error('Error spawning troop on server:', error);
      return false;
    }
  }

  // Override parent spawnTroop to use server
  public spawnTroop(type: TroopType, team: 'red' | 'blue', row?: number, col?: number): string {
    if (this.gameId) {
      // In server mode, spawn via server
      const spawnRow = row ?? (team === 'red' ? 10 : 23);
      const spawnCol = col ?? 8;

      this.spawnTroopOnServer(type, team, spawnRow, spawnCol);
      return `${type}_${team}_pending`; // Return temporary ID
    } else {
      // Fallback to local mode
      return super.spawnTroop(type, team, row, col);
    }
  }

  private handleGameEnd(winner: 'red' | 'blue'): void {
    this.gameState.isRunning = false;

    if (this.onGameEndCallback) {
      this.onGameEndCallback(winner);
    }

    this.cleanup();
  }

  private cleanup(): void {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
  }

  public stop(): void {
    this.cleanup();
    super.stop();
  }

  public reset(): void {
    this.cleanup();
    this.gameId = null;
    // Nettoyer le localStorage lors du reset
    if (typeof window !== 'undefined') {
      localStorage.removeItem('clash_royale_game_id');
    }
    super.reset();
  }

  public getGameId(): string | null {
    return this.gameId;
  }

  public getTacticalAnalysis(): string {
    // This would be populated from server state
    return 'Waiting for server analysis...';
  }

  public initializeWithGameId(gameId: string) {
    this.gameId = gameId;
    // Persister le game_id dans localStorage pour survivre au refresh
    if (typeof window !== 'undefined') {
      localStorage.setItem('clash_royale_game_id', gameId);
    }
    this.startServerSync();
    return this.gameId!;
  }

  // Restaurer le game_id depuis localStorage au démarrage
  public restoreFromStorage(): string | null {
    if (typeof window !== 'undefined') {
      const savedGameId = localStorage.getItem('clash_royale_game_id');
      if (savedGameId) {
        this.gameId = savedGameId;
        this.startServerSync();
        return savedGameId;
      }
    }
    return null;
  }
}

// Export singleton for direct use
export const serverEngine = new ServerSyncEngine();

# ====== ui/src/game/GameEngine.ts ======
import { GiantEntity, Giant } from './troops/Giant';
import { BabyDragonEntity, BabyDragon } from './troops/BabyDragon';
import { MiniPekkaEntity, MiniPekka } from './troops/MiniPekka';
import { ValkyrieEntity, Valkyrie } from './troops/Valkyrie';
import { BaseTroop, TroopEntity, TroopType } from './types/Troop';
import { TowerEntity, Tower } from './types/Tower';

export interface GameState {
  isRunning: boolean;
  isPaused: boolean;
  gameTime: number;
  lastUpdateTime: number;
}

export class GameEngine {
  protected troops: Map<string, TroopEntity> = new Map();
  protected towers: Map<string, TowerEntity> = new Map();
  protected gameState: GameState;
  private animationFrameId: number | null = null;
  protected onUpdateCallback?: (troops: BaseTroop[]) => void;
  protected onGameEndCallback?: (winner: 'red' | 'blue') => void;

  constructor() {
    this.gameState = {
      isRunning: false,
      isPaused: false,
      gameTime: 0,
      lastUpdateTime: 0
    };
  }

  public start(): void {
    if (this.gameState.isRunning) return;
    
    this.gameState.isRunning = true;
    this.gameState.isPaused = false;
    this.gameState.lastUpdateTime = performance.now();
    this.gameLoop();
  }

  public pause(): void {
    this.gameState.isPaused = true;
  }

  public resume(): void {
    if (!this.gameState.isRunning) return;
    
    this.gameState.isPaused = false;
    this.gameState.lastUpdateTime = performance.now();
    this.gameLoop();
  }

  public stop(): void {
    this.gameState.isRunning = false;
    this.gameState.isPaused = false;
    
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    
    this.troops.clear();
    this.towers.clear();
  }

  public reset(): void {
    this.stop();
    this.gameState.gameTime = 0;
    this.gameState.lastUpdateTime = 0;
  }

  // Méthodes génériques pour les troupes
  public spawnTroop(type: TroopType, team: 'red' | 'blue', row?: number, col?: number): string {
    const id = `${type}_${team}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    let troop: TroopEntity;

    switch (type) {
      case TroopType.GIANT:
        troop = row !== undefined && col !== undefined 
          ? new GiantEntity(id, team, { row, col }) as unknown as TroopEntity
          : new GiantEntity(id, team) as unknown as TroopEntity;
        break;
      case TroopType.BABY_DRAGON:
        troop = row !== undefined && col !== undefined 
          ? new BabyDragonEntity(id, team, { row, col }) as unknown as TroopEntity
          : new BabyDragonEntity(id, team) as unknown as TroopEntity;
        break;
      case TroopType.MINI_PEKKA:
        troop = row !== undefined && col !== undefined 
          ? new MiniPekkaEntity(id, team, { row, col }) as unknown as TroopEntity
          : new MiniPekkaEntity(id, team) as unknown as TroopEntity;
        break;
      case TroopType.VALKYRIE:
        troop = row !== undefined && col !== undefined 
          ? new ValkyrieEntity(id, team, { row, col }) as unknown as TroopEntity
          : new ValkyrieEntity(id, team) as unknown as TroopEntity;
        break;
      default:
        throw new Error(`Unknown troop type: ${type}`);
    }

    this.troops.set(id, troop);
    console.log(`${type} spawned: ${id} for team ${team}${row !== undefined && col !== undefined ? ` at (${row}, ${col})` : ''}`);
    return id;
  }

  // Méthodes de compatibilité pour les anciens appels
  public spawnGiant(team: 'red' | 'blue'): string {
    return this.spawnTroop(TroopType.GIANT, team);
  }

  public spawnGiantAt(team: 'red' | 'blue', row: number, col: number): string {
    return this.spawnTroop(TroopType.GIANT, team, row, col);
  }

  public spawnBabyDragon(team: 'red' | 'blue', row: number, col: number): string {
    return this.spawnTroop(TroopType.BABY_DRAGON, team, row, col);
  }

  public spawnMiniPekka(team: 'red' | 'blue', row: number, col: number): string {
    return this.spawnTroop(TroopType.MINI_PEKKA, team, row, col);
  }

  public spawnValkyrie(team: 'red' | 'blue', row: number, col: number): string {
    return this.spawnTroop(TroopType.VALKYRIE, team, row, col);
  }

  public removeTroop(id: string): void {
    this.troops.delete(id);
  }

  // Méthodes pour les tours
  public addTower(id: string, type: 'king' | 'princess', team: 'red' | 'blue', row: number, col: number): void {
    const tower = new TowerEntity(id, type, team, row, col);
    this.towers.set(id, tower);
    console.log(`Tower ${type} added: ${id} for team ${team} at (${row}, ${col})`);
  }

  public removeTower(id: string): void {
    this.towers.delete(id);
  }

  public getTower(id: string): Tower | undefined {
    return this.towers.get(id)?.data;
  }

  public getTowerEntity(id: string): TowerEntity | undefined {
    return this.towers.get(id);
  }

  public getAllTowers(): Tower[] {
    return Array.from(this.towers.values()).map(tower => tower.data);
  }

  public getActiveTowers(): Tower[] {
    const allTowers = this.getAllTowers();
    const activeTowers = allTowers.filter(tower => tower.active && tower.isAlive);
    return activeTowers;
  }

  public getTroop(id: string): BaseTroop | undefined {
    return this.troops.get(id)?.data;
  }

  public getAllTroops(): BaseTroop[] {
    return Array.from(this.troops.values()).map(troop => troop.data);
  }

  public getTroopEntity(id: string): TroopEntity | undefined {
    return this.troops.get(id);
  }

  public getTroopsByType(type: TroopType): BaseTroop[] {
    return this.getAllTroops().filter(troop => troop.type === type);
  }

  public getLivingTroops(): BaseTroop[] {
    return this.getAllTroops().filter(troop => troop.isAlive);
  }

  // Méthodes de compatibilité
  public getAllGiants(): Giant[] {
    return this.getTroopsByType(TroopType.GIANT) as unknown as Giant[];
  }

  public getAllBabyDragons(): BabyDragon[] {
    return this.getTroopsByType(TroopType.BABY_DRAGON) as unknown as BabyDragon[];
  }

  public getAllMiniPekkas(): MiniPekka[] {
    return this.getTroopsByType(TroopType.MINI_PEKKA) as unknown as MiniPekka[];
  }

  public getAllValkyries(): Valkyrie[] {
    return this.getTroopsByType(TroopType.VALKYRIE) as unknown as Valkyrie[];
  }

  public getLivingGiants(): Giant[] {
    return this.getAllGiants().filter(giant => giant.isAlive);
  }

  public getLivingBabyDragons(): BabyDragon[] {
    return this.getAllBabyDragons().filter(dragon => dragon.isAlive);
  }

  public getLivingMiniPekkas(): MiniPekka[] {
    return this.getAllMiniPekkas().filter(pekka => pekka.isAlive);
  }

  public getLivingValkyries(): Valkyrie[] {
    return this.getAllValkyries().filter(valkyrie => valkyrie.isAlive);
  }

  public setOnUpdateCallback(callback: (troops: BaseTroop[]) => void): void {
    this.onUpdateCallback = callback;
  }

  public setOnGameEndCallback(callback: (winner: 'red' | 'blue') => void): void {
    this.onGameEndCallback = callback;
  }

  private gameLoop = (): void => {
    if (!this.gameState.isRunning || this.gameState.isPaused) {
      return;
    }

    const currentTime = performance.now();
    const deltaTime = (currentTime - this.gameState.lastUpdateTime) / 1000; // Convert to seconds
    
    this.update(deltaTime);
    
    this.gameState.lastUpdateTime = currentTime;
    this.gameState.gameTime += deltaTime;
    
    // Utiliser setTimeout pour l'environnement serveur, requestAnimationFrame pour le client
    if (typeof window !== 'undefined') {
      this.animationFrameId = requestAnimationFrame(this.gameLoop);
    } else {
      // Environnement serveur - utiliser setTimeout
      setTimeout(() => {
        this.gameLoop();
      }, 16); // ~60 FPS
    }
  };

  protected update(deltaTime: number): void {
    // Nettoyer les troupes mortes
    this.cleanupDeadTroops();
    
    // Mettre à jour toutes les troupes vivantes
    const activeTowers = this.getActiveTowersInternal();
    const flaggedCells = this.getFlaggedCells();
    
    for (const troop of this.troops.values()) {
      troop.update(deltaTime, activeTowers, flaggedCells, this);
    }

    // Mettre à jour les tours (attaque des ennemis)
    this.updateTowers(deltaTime);

    // Vérifier la fin de partie
    this.checkGameEnd();

    // Notifier les composants React
    if (this.onUpdateCallback) {
      this.onUpdateCallback(this.getAllTroops());
    }
  }

  protected updateTowers(deltaTime: number): void {
    const allTroops = this.getAllTroops();
    const allTowers = this.getActiveTowersInternal();

    for (const tower of this.towers.values()) {
      // Mettre à jour le statut canAttack pour les tours du roi
      tower.updateCanAttackStatus(allTowers);
      
      // Mettre à jour la tour (recherche de cibles et attaque)
      tower.update(deltaTime, allTroops, allTowers, this);
    }
  }

  protected cleanupDeadTroops(): void {
    const deadTroops = Array.from(this.troops.entries())
      .filter(([, troop]) => {
        // Add safety check for data property
        if (!troop || !troop.data) {
          console.warn('Troop missing data property:', troop);
          return false;
        }
        return !troop.data.isAlive;
      })
      .map(([id, ]) => id);

    for (const id of deadTroops) {
      this.troops.delete(id);
    }
  }

  private checkGameEnd(): void {
    // Vérifier si une King Tower est détruite
    const kingRed = this.towers.get('king_red');
    const kingBlue = this.towers.get('king_blue');

    // Add safety checks for tower data
    if (kingRed && kingRed.data && !kingRed.data.isAlive) {
      // King Rouge détruite → Bleu gagne
      console.log('Game Over: Blue team wins! King Red destroyed');
      this.endGame('blue');
    } else if (kingBlue && kingBlue.data && !kingBlue.data.isAlive) {
      // King Bleue détruite → Rouge gagne
      console.log('Game Over: Red team wins! King Blue destroyed');
      this.endGame('red');
    }
  }

  private endGame(winner: 'red' | 'blue'): void {
    this.gameState.isRunning = false;
    
    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    
    // Notifier la fin de partie
    if (this.onGameEndCallback) {
      this.onGameEndCallback(winner);
    }
  }

  private getActiveTowersInternal(): Tower[] {
    return this.getActiveTowers();
  }

  private getFlaggedCells(): Set<string> {
    // Cette fonction sera connectée avec les flagged cells de l'Arena
    return new Set<string>();
  }


  public connectFlaggedCells(flaggedCells: Set<string>): void {
    // Méthode pour connecter les flagged cells depuis Arena
    this.getFlaggedCells = () => flaggedCells;
  }

  // Méthode pour trouver l'ennemi le plus proche (troupe ou tour)
  public findClosestEnemy(troop: BaseTroop): { target: any, distance: number } | null {
    const activeTowers = this.getActiveTowersInternal();
    const enemyTroops = this.getAllTroops().filter(t => 
      t.team !== troop.team && t.isAlive
    );

    let closestTarget: any = null;
    let closestDistance = Infinity;

    // Vérifier les tours ennemies (toujours accessibles)
    activeTowers.forEach(tower => {
      if (tower.team !== troop.team) {
        const distance = Math.sqrt(
          Math.pow(tower.row - troop.position.row, 2) +
          Math.pow(tower.col - troop.position.col, 2)
        );
        if (distance < closestDistance) {
          closestDistance = distance;
          closestTarget = { ...tower, type: 'tower' };
        }
      }
    });

    // Vérifier les troupes ennemies (avec restriction flying vs non-flying et côté de la rivière)
    enemyTroops.forEach(enemyTroop => {
      // Non-flying troops cannot target flying troops
      if (!troop.flying && enemyTroop.flying) {
        return; // Skip flying troops for non-flying attackers
      }
      
      // Pour les troupes non-volantes, vérifier qu'elles sont du même côté de la rivière
      if (!troop.flying) {
        const frontierRow = 16;
        const troopSide = troop.position.row <= frontierRow ? 'top' : 'bottom';
        const enemySide = enemyTroop.position.row <= frontierRow ? 'top' : 'bottom';
        
        if (troopSide !== enemySide) {
          return; // Skip enemies on opposite side of river for non-flying troops
        }
      }
      
      const distance = Math.sqrt(
        Math.pow(enemyTroop.position.row - troop.position.row, 2) +
        Math.pow(enemyTroop.position.col - troop.position.col, 2)
      );
      if (distance < closestDistance) {
        closestDistance = distance;
        closestTarget = { ...enemyTroop, type: 'troop' };
      }
    });

    return closestTarget ? { target: closestTarget, distance: closestDistance } : null;
  }

  // Méthodes utilitaires pour les statistiques
  public getGameStats() {
    const allTroops = this.getAllTroops();
    const livingTroops = this.getLivingTroops();
    const giants = this.getAllGiants();
    const babyDragons = this.getAllBabyDragons();
    const miniPekkas = this.getAllMiniPekkas();
    const valkyries = this.getAllValkyries();
    
    return {
      totalTroops: allTroops.length,
      livingTroops: livingTroops.length,
      redTroops: allTroops.filter(t => t.team === 'red').length,
      blueTroops: allTroops.filter(t => t.team === 'blue').length,
      // Statistiques par type
      totalGiants: giants.length,
      livingGiants: giants.filter(g => g.isAlive).length,
      redGiants: giants.filter(g => g.team === 'red').length,
      blueGiants: giants.filter(g => g.team === 'blue').length,
      totalBabyDragons: babyDragons.length,
      livingBabyDragons: babyDragons.filter(d => d.isAlive).length,
      redBabyDragons: babyDragons.filter(d => d.team === 'red').length,
      blueBabyDragons: babyDragons.filter(d => d.team === 'blue').length,
      totalMiniPekkas: miniPekkas.length,
      livingMiniPekkas: miniPekkas.filter(p => p.isAlive).length,
      redMiniPekkas: miniPekkas.filter(p => p.team === 'red').length,
      blueMiniPekkas: miniPekkas.filter(p => p.team === 'blue').length,
      totalValkyries: valkyries.length,
      livingValkyries: valkyries.filter(v => v.isAlive).length,
      redValkyries: valkyries.filter(v => v.team === 'red').length,
      blueValkyries: valkyries.filter(v => v.team === 'blue').length,
      // État du jeu
      gameTime: this.gameState.gameTime,
      isRunning: this.gameState.isRunning,
      isPaused: this.gameState.isPaused
    };
  }
}

// Instance singleton du moteur de jeu
export const gameEngine = new GameEngine();

# ====== ui/src/game/useServerGameEngine.ts ======
"use client";

import { useState, useEffect, useCallback } from "react";
import { BaseTroop, TroopType } from "./types/Troop";
import { Tower } from "./types/Tower";
import { serverEngine } from "./ServerSyncEngine";

export interface GameHookReturn {
  troops: BaseTroop[];
  giants: any[];
  babyDragons: any[];
  miniPekkas: any[];
  valkyries: any[];
  towers: Tower[];
  gameEnded: boolean;
  winner: "red" | "blue" | null;
  spawnTroop: (type: TroopType, team: "red" | "blue", row: number, col: number) => void;
  spawnGiantAt: (team: "red" | "blue", row: number, col: number) => void;
  spawnBabyDragon: (team: "red" | "blue", row: number, col: number) => void;
  spawnMiniPekka: (team: "red" | "blue", row: number, col: number) => void;
  spawnValkyrie: (team: "red" | "blue", row: number, col: number) => void;
  gameStats: {
    totalTroops: number;
    livingTroops: number;
    redTroops: number;
    blueTroops: number;
    totalGiants: number;
    livingGiants: number;
    redGiants: number;
    blueGiants: number;
    totalBabyDragons: number;
    livingBabyDragons: number;
    redBabyDragons: number;
    blueBabyDragons: number;
    totalMiniPekkas: number;
    livingMiniPekkas: number;
    redMiniPekkas: number;
    blueMiniPekkas: number;
    totalValkyries: number;
    livingValkyries: number;
    redValkyries: number;
    blueValkyries: number;
    gameTime: number;
    isRunning: boolean;
    isPaused: boolean;
  };
  startGame: () => void;
  pauseGame: () => void;
  resumeGame: () => void;
  stopGame: () => void;
  resetGame: () => void;
  isGameRunning: boolean;
  isGamePaused: boolean;
  connectFlaggedCells: (fc: Set<string>) => void;
}

export const useServerGameEngine = (): GameHookReturn => {
  const [troops, setTroops] = useState<BaseTroop[]>([]);
  const [towers, setTowers] = useState<Tower[]>([]);
  const [gameStats, setGameStats] = useState(serverEngine.getGameStats());
  const [gameEnded, setGameEnded] = useState(false);
  const [winner, setWinner] = useState<"red" | "blue" | null>(null);

  useEffect(() => {
    let mounted = true;

    // ✅ Restaurer le game_id depuis localStorage au démarrage
    const savedGameId = serverEngine.restoreFromStorage();
    if (savedGameId && mounted) {
      console.log("🔄 Restored game from storage:", savedGameId);
      serverEngine.start();
    }

    // ✅ Brancher les callbacks
    serverEngine.setOnUpdate((updatedTroops) => {
      setTroops([...updatedTroops]);
      setTowers([...serverEngine.getAllTowers()]);
      setGameStats(serverEngine.getGameStats());
    });

    serverEngine.setOnGameEnd((w) => {
      setGameEnded(true);
      setWinner(w);
    });

    return () => {
      mounted = false;
      serverEngine.stop();
    };
  }, []);

  const spawnTroop = useCallback((type: TroopType, team: "red" | "blue", row: number, col: number) => {
    serverEngine.spawnTroop(type, team, row, col);
  }, []);

  const spawnGiantAt = useCallback((team: "red" | "blue", row: number, col: number) => {
    serverEngine.spawnTroop(TroopType.GIANT, team, row, col);
  }, []);

  const spawnBabyDragon = useCallback((team: "red" | "blue", row: number, col: number) => {
    serverEngine.spawnTroop(TroopType.BABY_DRAGON, team, row, col);
  }, []);

  const spawnMiniPekka = useCallback((team: "red" | "blue", row: number, col: number) => {
    serverEngine.spawnTroop(TroopType.MINI_PEKKA, team, row, col);
  }, []);

  const spawnValkyrie = useCallback((team: "red" | "blue", row: number, col: number) => {
    serverEngine.spawnTroop(TroopType.VALKYRIE, team, row, col);
  }, []);

  const startGame = useCallback(() => {
    serverEngine.start();
    setGameStats(serverEngine.getGameStats());
  }, []);

  const pauseGame = useCallback(() => {
    serverEngine.pause();
    setGameStats(serverEngine.getGameStats());
  }, []);

  const resumeGame = useCallback(() => {
    serverEngine.resume();
    setGameStats(serverEngine.getGameStats());
  }, []);

  const stopGame = useCallback(() => {
    serverEngine.stop();
    setGameStats(serverEngine.getGameStats());
  }, []);

  const resetGame = useCallback(() => {
    serverEngine.reset();
    setGameEnded(false);
    setWinner(null);
  }, []);

  const connectFlaggedCells = useCallback((fc: Set<string>) => {
    serverEngine.connectFlaggedCells(fc);
  }, []);

  return {
    troops,
    giants: troops.filter(t => t.type === TroopType.GIANT) as any[],
    babyDragons: troops.filter(t => t.type === TroopType.BABY_DRAGON) as any[],
    miniPekkas: troops.filter(t => t.type === TroopType.MINI_PEKKA) as any[],
    valkyries: troops.filter(t => t.type === TroopType.VALKYRIE) as any[],
    towers,
    gameEnded,
    winner,
    spawnTroop,
    spawnGiantAt,
    spawnBabyDragon,
    spawnMiniPekka,
    spawnValkyrie,
    gameStats,
    startGame,
    pauseGame,
    resumeGame,
    stopGame,
    resetGame,
    isGameRunning: gameStats.isRunning,
    isGamePaused: gameStats.isPaused,
    connectFlaggedCells,
  };
};


# ====== ui/src/game/useGameEngine.ts ======
import { useState, useEffect, useCallback } from 'react';
import { gameEngine } from './GameEngine';
import { Giant } from './troops/Giant';
import { BabyDragon } from './troops/BabyDragon';
import { MiniPekka } from './troops/MiniPekka';
import { Valkyrie } from './troops/Valkyrie';
import { BaseTroop, TroopType } from './types/Troop';
import { Tower } from './types/Tower';

export interface GameHookReturn {
  // Troupes génériques
  troops: BaseTroop[];
  // Troupes par type (pour compatibilité)
  giants: Giant[];
  babyDragons: BabyDragon[];
  miniPekkas: MiniPekka[];
  valkyries: Valkyrie[];
  // Tours avec leur santé mise à jour
  towers: Tower[];
  // État de fin de partie
  gameEnded: boolean;
  winner: 'red' | 'blue' | null;
  // Méthodes génériques
  spawnTroop: (type: TroopType, team: 'red' | 'blue', row: number, col: number) => void;
  // Méthodes spécifiques (pour compatibilité)
  spawnGiantAt: (team: 'red' | 'blue', row: number, col: number) => void;
  spawnBabyDragon: (team: 'red' | 'blue', row: number, col: number) => void;
  spawnMiniPekka: (team: 'red' | 'blue', row: number, col: number) => void;
  spawnValkyrie: (team: 'red' | 'blue', row: number, col: number) => void;
  // Contrôles du jeu
  gameStats: {
    totalTroops: number;
    livingTroops: number;
    redTroops: number;
    blueTroops: number;
    totalGiants: number;
    livingGiants: number;
    redGiants: number;
    blueGiants: number;
    totalBabyDragons: number;
    livingBabyDragons: number;
    redBabyDragons: number;
    blueBabyDragons: number;
    totalMiniPekkas: number;
    livingMiniPekkas: number;
    redMiniPekkas: number;
    blueMiniPekkas: number;
    totalValkyries: number;
    livingValkyries: number;
    redValkyries: number;
    blueValkyries: number;
    gameTime: number;
    isRunning: boolean;
    isPaused: boolean;
  };
  startGame: () => void;
  pauseGame: () => void;
  resumeGame: () => void;
  stopGame: () => void;
  resetGame: () => void;
  isGameRunning: boolean;
  isGamePaused: boolean;
}

export const useGameEngine = (towers?: Tower[], flaggedCells?: Set<string>): GameHookReturn => {
  const [troops, setTroops] = useState<BaseTroop[]>([]);
  const [giants, setGiants] = useState<Giant[]>([]);
  const [babyDragons, setBabyDragons] = useState<BabyDragon[]>([]);
  const [miniPekkas, setMiniPekkas] = useState<MiniPekka[]>([]);
  const [valkyries, setValkyries] = useState<Valkyrie[]>([]);
  const [gameTowers, setGameTowers] = useState<Tower[]>([]);
  const [gameStats, setGameStats] = useState(gameEngine.getGameStats());
  const [gameEnded, setGameEnded] = useState<boolean>(false);
  const [winner, setWinner] = useState<'red' | 'blue' | null>(null);

  // Mettre à jour les troupes et tours quand le moteur les modifie
  const handleGameUpdate = useCallback((updatedTroops: BaseTroop[]) => {
    setTroops([...updatedTroops]);
    // Séparer par type pour compatibilité
    setGiants([...updatedTroops.filter(t => t.type === TroopType.GIANT)] as unknown as Giant[]);
    setBabyDragons([...updatedTroops.filter(t => t.type === TroopType.BABY_DRAGON)] as unknown as BabyDragon[]);
    setMiniPekkas([...updatedTroops.filter(t => t.type === TroopType.MINI_PEKKA)] as unknown as MiniPekka[]);
    setValkyries([...updatedTroops.filter(t => t.type === TroopType.VALKYRIE)] as unknown as Valkyrie[]);
    // Mettre à jour les tours avec leur santé actuelle
    setGameTowers([...gameEngine.getAllTowers()]);
    setGameStats(gameEngine.getGameStats());
  }, []);

  // Gérer la fin de partie
  const handleGameEnd = useCallback((gameWinner: 'red' | 'blue') => {
    setGameEnded(true);
    setWinner(gameWinner);
  }, []);

  // Configurer le callback du moteur de jeu
  useEffect(() => {
    gameEngine.setOnUpdateCallback(handleGameUpdate);
    gameEngine.setOnGameEndCallback(handleGameEnd);
    
    return () => {
      gameEngine.setOnUpdateCallback(() => {});
      gameEngine.setOnGameEndCallback(() => {});
    };
  }, [handleGameUpdate, handleGameEnd]);

  // Connecter les flagged cells au moteur de jeu
  useEffect(() => {
    if (flaggedCells) {
      gameEngine.connectFlaggedCells(flaggedCells);
    }
  }, [flaggedCells]);

  // Fonctions de contrôle du jeu
  const spawnTroop = useCallback((type: TroopType, team: 'red' | 'blue', row: number, col: number) => {
    gameEngine.spawnTroop(type, team, row, col);
  }, []);

  const spawnGiantAt = useCallback((team: 'red' | 'blue', row: number, col: number) => {
    gameEngine.spawnGiantAt(team, row, col);
  }, []);

  const spawnBabyDragon = useCallback((team: 'red' | 'blue', row: number, col: number) => {
    gameEngine.spawnBabyDragon(team, row, col);
  }, []);

  const spawnMiniPekka = useCallback((team: 'red' | 'blue', row: number, col: number) => {
    gameEngine.spawnMiniPekka(team, row, col);
  }, []);

  const spawnValkyrie = useCallback((team: 'red' | 'blue', row: number, col: number) => {
    gameEngine.spawnValkyrie(team, row, col);
  }, []);

  const startGame = useCallback(() => {
    gameEngine.start();
    setGameStats(gameEngine.getGameStats());
  }, []);

  const pauseGame = useCallback(() => {
    gameEngine.pause();
    setGameStats(gameEngine.getGameStats());
  }, []);

  const resumeGame = useCallback(() => {
    gameEngine.resume();
    setGameStats(gameEngine.getGameStats());
  }, []);

  const stopGame = useCallback(() => {
    gameEngine.stop();
    setTroops([]);
    setGiants([]);
    setBabyDragons([]);
    setMiniPekkas([]);
    setValkyries([]);
    setGameStats(gameEngine.getGameStats());
  }, []);

  const resetGame = useCallback(() => {
    gameEngine.reset();
    setTroops([]);
    setGiants([]);
    setBabyDragons([]);
    setMiniPekkas([]);
    setValkyries([]);
    setGameStats(gameEngine.getGameStats());
    setGameEnded(false);
    setWinner(null);
    
    // Réinitialiser les tours à leur santé maximale
    if (towers) {
      towers.forEach(tower => {
        gameEngine.addTower(tower.id, tower.type, tower.team, tower.row, tower.col);
      });
    }
  }, [towers]);

  // Cleanup à la destruction du composant
  useEffect(() => {
    return () => {
      gameEngine.stop();
    };
  }, []);

  return {
    // Troupes génériques
    troops,
    // Troupes par type (pour compatibilité)
    giants,
    babyDragons,
    miniPekkas,
    valkyries,
    // Tours avec leur santé mise à jour
    towers: gameTowers,
    // État de fin de partie
    gameEnded,
    winner,
    // Méthodes génériques
    spawnTroop,
    // Méthodes spécifiques (pour compatibilité)
    spawnGiantAt,
    spawnBabyDragon,
    spawnMiniPekka,
    spawnValkyrie,
    // Contrôles du jeu
    gameStats,
    startGame,
    pauseGame,
    resumeGame,
    stopGame,
    resetGame,
    isGameRunning: gameStats.isRunning,
    isGamePaused: gameStats.isPaused
  };
};


# ====== ui/src/app/page.tsx ======
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import TransitionScreen from "@/components/TransitionScreen";

export default function Home() {
  const [showTransition, setShowTransition] = useState(false);
  const router = useRouter();

  const handleCombatClick = () => {
    const id = window.prompt("Entre un Game ID (copie/colle depuis ton terminal) :");
    if (!id || !id.trim()) return; // pas d'ID => on reste au menu
    router.push(`/arena?game_id=${encodeURIComponent(id.trim())}`);
  };

  return (
    <>
      <div className="min-h-screen flex items-center justify-center relative overflow-hidden">
        {/* Fond flou */}
        <img
          src="/images/backgrounds/goal.png"
          alt="Goal Background Blurred"
          className="absolute inset-0 w-full h-full object-cover blur-sm"
        />
        
        {/* Container avec ratio 9/16 */}
        <div className="relative w-[56.25vh] h-screen max-w-full max-h-screen z-10">
          <img
            src="/images/backgrounds/goal.png"
            alt="Goal Background"
            className="w-full h-full object-cover"
          />
          
          {/* Bouton jouer stylisé */}
          <div className="absolute bottom-6 left-0 right-0 flex items-center justify-center">
            <Button 
              onClick={handleCombatClick}
              className="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold py-10 px-7 rounded-2xl text-2xl transition-all duration-300 shadow-2xl border-4 border-yellow-300"
            >
              Combat
            </Button>
          </div>
        </div>
      </div>

      {/* Écran de transition */}
      {showTransition && (
        <TransitionScreen 
          onTransitionComplete={() => setShowTransition(false)}
        />
      )}
    </>
  );
}


# ====== ui/src/app/arena/page.tsx ======
"use client";

import { Button } from "@/components/ui/button";
import React, { useState } from "react";
import TowerHealthBar from "@/components/TowerHealthBar";
import ClashTimer from "@/components/ClashTimer";
import GameEndScreen from "@/components/GameEndScreen";
import { TroopType, TROOP_CONFIGS } from "@/game/types/Troop";
import { useServerGameEngine } from "@/game/useServerGameEngine";
import { serverEngine } from "@/game/ServerSyncEngine";
import { useSearchParams, useRouter } from "next/navigation";

export default function Arena() {
  const showGrid = false;
  const numRows = 34;
  const numCols = 18;

  const [currentTeam, setCurrentTeam] = useState<'red' | 'blue'>('red');
  const [draggedCard, setDraggedCard] = useState<{troopType: TroopType, team: 'red' | 'blue'} | null>(null);
  const router = useRouter();
  const params = useSearchParams();
  const gid = params.get("game_id");

  const isArenaVisible = true;

  // Tour visuals (pour flags + sprites)
  const TOWER = React.useMemo(() => ({
    KING_RED: {
      id: 'king_red', name: 'King Red', image: '/images/towers/king_red.png',
      row: 2, col: 8, size: 6.5, offsetX: 1.4, offsetY: -2.8, team: 'red', type: 'king',
      flagged_cells: [[1,7],[1,8],[1,9],[1,10],[2,10],[2,9],[2,8],[2,7],[3,7],[3,8],[3,9],[3,10],[4,10],[4,9],[4,8],[4,7]],
      active: true,
    },
    PRINCESS_RED_1: {
      id: 'princess_red', name: 'Princess Red', image: '/images/towers/princess_red.png',
      row: 6, col: 3, size: 4, offsetX: -0.7, offsetY: -3.3, team: 'red', type: 'princess',
      flagged_cells: [[5,2],[5,3],[5,4],[6,4],[7,4],[7,3],[7,2],[6,2],[6,3]], active: true,
    },
    PRINCESS_RED_2: {
      id: 'princess_red_2', name: 'Princess Red', image: '/images/towers/princess_red.png',
      row: 6, col: 14, size: 4, offsetX: 0, offsetY: -3.3, team: 'red', type: 'princess',
      flagged_cells: [[5,13],[5,14],[5,15],[6,15],[6,14],[6,13],[7,13],[7,14],[7,15]], active: true,
    },
    PRINCESS_BLUE_1: {
      id: 'princess_blue', name: 'Princess Blue', image: '/images/towers/princess_blue.png',
      row: 27, col: 3, size: 7.4, offsetX: -0.4, offsetY: -2, team: 'blue', type: 'princess',
      flagged_cells: [[26,2],[26,3],[26,4],[27,4],[27,3],[27,2],[28,2],[28,3],[28,4]], active: true,
    },
    PRINCESS_BLUE_2: {
      id: 'princess_blue_2', name: 'Princess Blue', image: '/images/towers/princess_blue.png',
      row: 27, col: 14, size: 7.4, offsetX: 0, offsetY: -2, team: 'blue', type: 'princess',
      flagged_cells: [[26,13],[26,14],[26,15],[27,15],[27,14],[27,13],[28,13],[28,14],[28,15]], active: true,
    },
    KING_BLUE: {
      id: 'king_blue', name: 'King Blue', image: '/images/towers/king_blue.png',
      row: 30, col: 8, size: 6.5, offsetX: 1, offsetY: -2, team: 'blue', type: 'king',
      flagged_cells: [[29,7],[30,7],[31,7],[32,7],[32,8],[31,8],[30,8],[29,8],[29,9],[29,10],[30,10],[30,9],[31,9],[31,10],[32,10],[32,9]],
      active: true,
    }
  }), []);

  const {
    troops,
    towers: gameEngineTowers,
    spawnTroop,
    startGame,
    pauseGame,
    resumeGame,
    stopGame,
    resetGame,
    isGameRunning,
    isGamePaused,
    gameEnded,
    winner,
    connectFlaggedCells,
  } = useServerGameEngine();

  // flagged cells basées sur les tours visibles
  const getActiveTowersFlaggedCells = React.useCallback(() => {
    const flaggedCells = new Set<string>();
    Object.values(TOWER).forEach(tower => {
      const engineTower = gameEngineTowers.find(t => t.id === tower.id);
      const alive = !engineTower || engineTower.isAlive;
      if (tower.active && tower.flagged_cells && alive) {
        tower.flagged_cells.forEach(([r, c]) => flaggedCells.add(`${r}-${c}`));
      }
    });
    return flaggedCells;
  }, [gameEngineTowers, TOWER]);

  const flaggedCells = React.useMemo(() => getActiveTowersFlaggedCells(), [getActiveTowersFlaggedCells]);

  React.useEffect(() => {
    if (flaggedCells) connectFlaggedCells(flaggedCells);
  }, [flaggedCells, connectFlaggedCells]);

  // Si pas d'ID -> retour au menu
  React.useEffect(() => {
    if (!gid) router.replace("/");
  }, [gid, router]);

  // Si on a un ID -> on rejoint la game et on démarre le moteur
  React.useEffect(() => {
    if (!gid) return;
    try {
      console.log("🎮 Joining existing game:", gid);
      serverEngine.stop();
      serverEngine.reset();
      serverEngine.initializeWithGameId(gid);
      serverEngine.start();
      console.log("✅ Joined game:", gid);
    } catch (e) {
      console.error("❌ Failed to join game:", e);
      // Nettoyer le localStorage en cas d'erreur
      if (typeof window !== 'undefined') {
        localStorage.removeItem('clash_royale_game_id');
      }
      router.replace("/");
    }
  }, [gid, router]);

  if (!gid) return null; // évite de rendre l'arène le temps de la redirection

  const handleCardDragStart = (troopType: TroopType) => setDraggedCard({ troopType, team: currentTeam });
  const handleCardDragEnd = () => setDraggedCard(null);
  const handleCellDrop = (row: number, col: number, e: React.DragEvent) => {
    e.preventDefault();
    if (draggedCard && isGameRunning) {
      spawnTroop(draggedCard.troopType, draggedCard.team, row, col);
      setDraggedCard(null);
    }
  };
  const handleCellDragOver = (e: React.DragEvent) => e.preventDefault();
  const switchTeam = () => setCurrentTeam(currentTeam === 'red' ? 'blue' : 'red');

  const getTroopGifPath = (troop: any) => {
    const config = TROOP_CONFIGS[troop.type as TroopType];
    if (!config) return null;
    if (troop.isInCombat) {
      const targetIsAbove = troop.targetPosition.row < troop.position.row;
      const gifType = targetIsAbove ? 'player' : 'opponent';
      return `${config.gifPaths.fight[gifType as 'player' | 'opponent']}?v=${troop.isInCombat}`;
    } else {
      const isMovingDown = troop.targetPosition.row > troop.position.row;
      const isMovingUp = troop.targetPosition.row < troop.position.row;
      let gifType: 'player' | 'opponent';
      if (isMovingDown) gifType = 'opponent';
      else if (isMovingUp) gifType = 'player';
      else gifType = troop.team === 'red' ? 'player' : 'opponent';
      return `${config.gifPaths.walk[gifType]}?v=${troop.isInCombat}`;
    }
  };

  const handleRestart = () => {
    resetGame();
    setTimeout(() => startGame(), 100);
  };

  return (
    <div className={`min-h-screen flex items-center justify-center relative overflow-hidden transition-opacity duration-1000 ${isArenaVisible ? 'opacity-100' : 'opacity-0'}`}>
      <img src="/images/backgrounds/arena_in_game.png" alt="Goal Background Blurred" className="absolute inset-0 w-full h-full object-cover blur-sm" />

      {gameEnded && winner && <GameEndScreen winner={winner} onRestart={handleRestart} />}

      <div className="relative w-[56.25vh] mb-10 h-screen max-w-full max-h-screen z-10">
        <img src="/images/backgrounds/arena_in_game.png" alt="Arena In Game" className="w-full h-full object-cover" />

        <div className="absolute inset-0 pl-[10%] pr-[9.8%] pt-[27.8%] pb-[34.2%]">
          <div className={`w-full h-full grid gap-0`} style={{ gridTemplateColumns: `repeat(${numCols}, 1fr)`, gridTemplateRows: `repeat(${numRows}, 1fr)` }}>
            {Array.from({ length: numRows * numCols }, (_, index) => {
              const row = Math.floor(index / numCols);
              const col = index % numCols;
              const isEven = (row + col) % 2 === 0;
              const towerPosition = Object.values(TOWER).find(pos => row === pos.row && col === pos.col);
              const shouldShowTower = !!towerPosition;
              const tower = towerPosition || null;

              return (
                <div
                  key={index}
                  className={`w-full h-full transition-all duration-200 relative ${!showGrid ? 'bg-transparent' : 'bg-black/20'}
                    ${
                      draggedCard 
                        ? `cursor-crosshair ${draggedCard.team === 'red' ? 'hover:bg-red-400/50 hover:ring-2 ring-red-400' : 'hover:bg-blue-400/50 hover:ring-2 ring-blue-400'}`
                        : 'cursor-default'
                    } ${
                      isEven ? 'bg-white/10 hover:bg-white/20 hover:ring-2 ring-yellow-400 ring-opacity-50'
                             : 'bg-black/20 hover:bg-black/30 hover:ring-2 ring-yellow-400 ring-opacity-50'
                    }`}
                  onDrop={(e) => handleCellDrop(row, col, e)}
                  onDragOver={handleCellDragOver}
                >
                  {shouldShowTower && (() => {
                    const engineTower = gameEngineTowers.find(t => t.id === tower!.id);
                    const dead = engineTower && !engineTower.isAlive;
                    if (dead) return null;

                    return (
                      <>
                        <img
                          src={tower!.image}
                          alt={tower!.name}
                          className="absolute inset-0 w-full h-full z-10 pointer-events-none object-contain"
                          style={{ transform: `scale(${tower!.size}) translate(${tower!.offsetX}px, ${tower!.offsetY}px)` }}
                        />
                        <div
                          className="absolute z-20 pointer-events-none"
                          style={{
                            left: `${(tower as any).offsetX - 16}px`,
                            top: `${
                              (tower as any).type === 'king'
                                ? ((tower as any).team === 'blue' ? 20 : -60)
                                : ((tower as any).team === 'blue' ? (tower as any).offsetY : (tower as any).offsetY - 40)
                            }px`,
                          }}
                        >
                          {(() => {
                            const t = engineTower;
                            const currentHealth = t?.health || ((tower as any).type === 'king' ? 4825 : 3052);
                            const maxHealth = t?.maxHealth || ((tower as any).type === 'king' ? 4825 : 3052);
                            return <TowerHealthBar currentHealth={currentHealth} maxHealth={maxHealth} team={(tower as any).team} />;
                          })()}
                        </div>
                      </>
                    );
                  })()}

                  {troops
                    .filter(troop => Math.floor(troop.position.row) === row && Math.floor(troop.position.col) === col)
                    .map(troop => {
                      const gifPath = getTroopGifPath(troop);
                      const config = TROOP_CONFIGS[troop.type as TroopType];
                      if (!gifPath || !config) return null;
                      return (
                        <div
                          key={troop.id}
                          className="absolute z-20 w-full h-full flex items-center justify-center pointer-events-none"
                          style={{ transform: `translate(${(troop.position.col - Math.floor(troop.position.col)) * 100}%, ${(troop.position.row - Math.floor(troop.position.row)) * 100}%)` }}
                        >
                          <img
                            key={`${troop.id}-${troop.isInCombat ? 'combat' : 'walk'}`}
                            src={gifPath}
                            alt={`${troop.type} ${troop.team}`}
                            className="w-12 h-12 object-contain"
                            style={{
                              transform: `scale(${typeof config.scale === 'object' ? (troop.isInCombat ? config.scale.fight : config.scale.walk) : config.scale})`,
                            }}
                          />
                          <div className="absolute -top-2 left-0 w-full h-1 bg-gray-600 rounded">
                            <div
                              className={`h-full rounded transition-all duration-200 ${troop.team === 'red' ? 'bg-red-400' : 'bg-blue-400'}`}
                              style={{ width: `${(troop.health / troop.maxHealth) * 100}%` }}
                            />
                          </div>
                        </div>
                      );
                    })}
                </div>
              );
            })}
          </div>
        </div>

        <div className="absolute top-4 right-4 z-10">
          <ClashTimer />
        </div>

        {/* Barre de cartes */}
        <div className="fixed bottom-0 left-0 right-0 z-10">
          <div className="flex justify-center items-end pb-4">
            <div className="relative w-[80%] max-w-md">
              <img src="/images/cards/more/card_box.png" alt="Card Box" className="w-full h-44 object-fill rounded-t-lg" />
              <div className="absolute inset-0 grid grid-cols-4 gap-1.5 pl-[4.5%] pr-[4%] pb-[5.5%] items-stretch">
                {/* Baby Dragon */}
                <div
                  className={`w-full h-full transition-all duration-200 hover:scale-105 hover:z-10 relative rounded ${
                    !isGameRunning ? 'opacity-50 cursor-not-allowed' : 'cursor-grab active:cursor-grabbing hover:ring-2 hover:ring-yellow-400 hover:ring-opacity-80'
                  }`}
                  draggable={isGameRunning}
                  onDragStart={() => handleCardDragStart(TroopType.BABY_DRAGON)}
                  onDragEnd={handleCardDragEnd}
                >
                  <img src="/images/cards/more/BabyDragonCard.png" alt={`${currentTeam} Baby Dragon`} className="w-full h-full object-contain drop-shadow-lg pointer-events-none" />
                </div>

                {/* Mini PEKKA */}
                <div
                  className={`w-full h-full transition-all duration-200 hover:scale-105 hover:z-10 relative rounded ${
                    !isGameRunning ? 'opacity-50 cursor-not-allowed' : 'cursor-grab active:cursor-grabbing hover:ring-2 hover:ring-purple-400 hover:ring-opacity-80'
                  }`}
                  draggable={isGameRunning}
                  onDragStart={() => handleCardDragStart(TroopType.MINI_PEKKA)}
                  onDragEnd={handleCardDragEnd}
                >
                  <img src="/images/cards/more/MiniPEKKACard.png" alt={`${currentTeam} Mini PEKKA`} className="w-full h-full object-contain drop-shadow-lg pointer-events-none" />
                </div>

                {/* Giant */}
                <div
                  className={`w-full h-full transition-all duration-200 hover:scale-105 hover:z-10 relative rounded ${
                    !isGameRunning ? 'opacity-50 cursor-not-allowed' : 'cursor-grab active:cursor-grabbing hover:ring-2 hover:ring-orange-400 hover:ring-opacity-80'
                  }`}
                  draggable={isGameRunning}
                  onDragStart={() => handleCardDragStart(TroopType.GIANT)}
                  onDragEnd={handleCardDragEnd}
                >
                  <img src="/images/cards/more/GiantCard.png" alt={`${currentTeam} Giant`} className="w-full h-full object-contain drop-shadow-lg pointer-events-none" />
                </div>

                {/* Valkyrie */}
                <div
                  className={`w-full h-full transition-all duration-200 hover:scale-105 hover:z-10 relative rounded ${
                    !isGameRunning ? 'opacity-50 cursor-not-allowed' : 'cursor-grab active:cursor-grabbing hover:ring-2 hover:ring-red-400 hover:ring-opacity-80'
                  }`}
                  draggable={isGameRunning}
                  onDragStart={() => handleCardDragStart(TroopType.VALKYRIE)}
                  onDragEnd={handleCardDragEnd}
                >
                  <img src="/images/cards/more/ValkyrieCard.png" alt={`${currentTeam} Valkyrie`} className="w-full h-full object-contain drop-shadow-lg pointer-events-none" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Contrôles */}
      <div className="absolute top-4 left-4 z-10 space-y-2">
        <Button
          variant="secondary"
          className={`font-bold py-2 px-4 rounded-lg transition-colors duration-200 shadow-lg border-2 border-white/20 ${
            currentTeam === 'red' ? 'bg-red-600 hover:bg-red-700 text-white' : 'bg-blue-600 hover:bg-blue-700 text-white'
          }`}
          onClick={switchTeam}
        >
          Team: {currentTeam === 'red' ? 'Red' : 'Blue'}
        </Button>

        <div className="space-x-2">
          {!isGameRunning ? (
            <Button
              variant="secondary"
              className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 shadow-lg border-2 border-white/20"
              onClick={startGame}
            >
              Start Game
            </Button>
          ) : (
            <>
              {isGamePaused ? (
                <Button
                  variant="secondary"
                  className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 shadow-lg border-2 border-white/20"
                  onClick={resumeGame}
                >
                  Resume
                </Button>
              ) : (
                <Button
                  variant="secondary"
                  className="bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 shadow-lg border-2 border-white/20"
                  onClick={pauseGame}
                >
                  Pause
                </Button>
              )}
              <Button
                variant="secondary"
                className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 shadow-lg border-2 border-white/20"
                onClick={stopGame}
              >
                Stop
              </Button>
            </>
          )}
        </div>

        {isGameRunning && (
          <div className="text-center">
            <div className="bg-black/50 rounded-lg p-3 border border-white/20">
              <p className="text-white text-sm font-medium">
                Drag cards from the bottom to spawn {currentTeam} troops
              </p>
              <p className="text-gray-300 text-xs mt-1">Switch team with the button above</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
